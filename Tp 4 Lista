#6. Dada una lista de superhéroes de comics, de los cuales se conoce su nombre, año aparición, 
# casa de comic a la que pertenece (Marvel o DC) y biografía, implementar la funciones necesarias para poder realizar
#  las siguientes actividades:
# a. eliminar el nodo que contiene la información de Linterna Verde;
# b. mostrar el año de aparición de Wolverine;
# c. cambiar la casa de Dr. Strange a Marvel;
# d. mostrar el nombre de aquellos superhéroes que en su biografía menciona la palabra
# “traje” o “armadura”;
# e. mostrar el nombre y la casa de los superhéroes cuya fecha de aparición
# sea anterior a 1963;
# f. mostrar la casa a la que pertenece Capitana Marvel y Mujer Maravilla;
# g. mostrar toda la información de Flash y Star-Lord;
# h. listar los superhéroes que comienzan con la letra B, M y S;
# i. determinar cuántos superhéroes hay de cada casa de comic.
from lista import Lista
# lista_super=Lista()

# datos = [
#         {'name':'Wolverine','aparicion': 1960, 'casa de comic' : 'DC', 'biografia': 'garras'},
#         {'name':'Linterna Verde','aparicion': 1970, 'casa de comic' : 'MARVEL', 'biografia': 'linterna'},
#         {'name':'Dr. Strange','aparicion': 1978, 'casa de comic' : 'DC', 'biografia': 'traje'},
#         {'name': 'Black Panther','aparicion':1970, 'casa de comic' : 'MARVEL', 'biografia': 'armadura'},
#         {'name':'Capitana Marvel','aparicion': 1976, 'casa de comic' : 'MARVEL', 'biografia': 'traje'},
#         {'name':'Mujer Maravilla','aparicion': 1998, 'casa de comic' : 'DC', 'biografia': 'capa'},
#         {'name':'Flash','aparicion': 1999, 'casa de comic' : 'MARVEL', 'biografia': 'rapidez'},
#         {'name':'Star-Lord','aparicion': 1991, 'casa de comic' : 'MARVEL', 'biografia': 'lord'},
#         {'name': 'Iron man','aparicion':1940, 'casa de comic' : 'MARVEL', 'biografia': 'armadura'},
#      ]

# for personas in datos:
#     lista_super.insertar(personas,'name')

# lista_super.barrido()
# print()
##punto a
# print('elemento eliminado', lista_super.eliminar('Linterna Verde', 'name'))
# print()

##punto b
# pos = lista_super.busqueda('Wolverine','name')
# if (pos != -1):
#    print('Wolverine aparecio en el año: ', lista_super.obtener_elemento(pos)['aparicion'])

##puntoc
# pos2 = lista_super.busqueda('Dr. Strange','name')
# if (pos2 != -1):
#     lista_super.obtener_elemento(pos2)['casa de comic'] = 'Marvel'
# print()
# lista_super.barrido()

 ##punto d
# for i in range(lista_super.tamanio()):
#     aux = lista_super.obtener_elemento(i)
#     bus_traje = aux['biografia']
#     if (('traje' in bus_traje) or ('armadura' in bus_traje)):
#         print ('El personaje ',aux['name'],' tiene ', aux['biografia'])

##punto e
# print ('personajes que aparecieron antes el año 1963')
# for i in range (lista_super.tamanio()):
#     aux = lista_super.obtener_elemento(i)
#     if (aux['aparicion'] < 1963):
#         print (aux['name'],'--',aux['casa de comic'])

###punto f
# for i in range (lista_super.tamanio()):
#     aux = lista_super.obtener_elemento(i)
#     if ((aux['name'] == 'Capitana Marvel') or (aux['name'] == 'Mujer Maravilla')):
#         print ('El personaje ',aux['name'],', pertenece a la casa de ', aux['casa de comic'])
   
##punto g

# for i in range (lista_super.tamanio()):
#     aux = lista_super.obtener_elemento(i)
#     if ((aux['name'] == 'Flash') or (aux['name'] == 'Star-Lord')):
#         print (aux)

#punto h 
# for i in range (lista_super.tamanio()):
#     aux = lista_super.obtener_elemento(i)
#     if (((aux['name'])[0] == 'B') or ((aux['name'])[0] == 'M') or ((aux['name'])[0] == 'S')):
#         print (aux['name'])

##punto I
# cont_marvel = 0
# cont_dc = 0
# for i in range(lista_super.tamanio()):

#     aux = lista_super.obtener_elemento(i)
#     if (aux['casa de comic'] == 'MARVEL'):
#         cont_marvel += 1
#     if (aux['casa de comic'] == 'DC'):
#         cont_dc += 1

# print (cont_marvel, ' personaje/s de marvel')
# print (cont_dc, ' personaje/s de DC')














#7. Implementar los algoritmos necesarios para resolver las siguientes tareas:
# a. concatenar dos listas, una atrás de la otra;
# b. concatenar dos listas en una sola omitiendo los datos repetidos y manteniendo su orden;
# c. contar cuántos elementos repetidos hay entre dos listas, es decir la intersección de ambas;[113]
# d. eliminar todos los nodos de una lista de a uno a la vez mostrando su contenido


# lista1 = Lista()
# lista2 = Lista()
# lista_concatenada= Lista()

# for i in range (0,10):
#     lista1.insertar(i)

# for i in range (0,10):
#     lista2.insertar(i*2)

# for i in range (lista1.tamanio()):
#     lista_concatenada.insertar(lista1.obtener_elemento(i))

# for i in range (lista2.tamanio()):
#     lista_concatenada.insertar(lista2.obtener_elemento(i))

# # print ('Listas concatenadas: ')
# # lista_concatenada.barrido()
# # print()

# cont_repetido = 0
# for i in range (lista2.tamanio()):
#     elemento = lista2.obtener_elemento(i)
#     pos = lista1.busqueda(elemento)
#     if pos == -1:
#         lista1.insertar(elemento)
#     else:
#         cont_repetido +=1

# print ('Listas concatenadas sin valores repetidos: ')
# lista1.barrido()
# print()

# print('Cantidad de calores repetidos en ambas listas: ', cont_repetido)

# for i in range (lista1.tamanio()):
#     while i < lista1.tamanio():
#         print (lista1.eliminar(lista1.obtener_elemento(i)))




# 15. Se cuenta con una lista de entrenadores Pokémon. De cada uno de estos se conoce: nombre, cantidad de torneos ganados, cantidad de batallas perdidas y cantidad de batallas ganadas. Y además la lista de sus Pokémons, de los cuales se sabe: nombre, nivel, tipo y subtipo. Se pide resolver 
# las siguientes actividades utilizando lista de lista implementando las funciones necesarias:
# a. obtener la cantidad de Pokémons de un determinado entrenador;
# b. listar los entrenadores que hayan ganado más de tres torneos;[115]
# c. el Pokémon de mayor nivel del entrenador con mayor cantidad de torneos ganados;
# d. mostrar todos los datos de un entrenador y sus Pokémos;
# e. mostrar los entrenadores cuyo porcentaje de batallas ganados sea mayor al 79 %;
# f. los entrenadores que tengan Pokémons de tipo fuego y planta o agua/volador
# (tipo y subtipo);
# g. el promedio de nivel de los Pokémons de un determinado entrenador;
# h. determinar cuántos entrenadores tienen a un determinado Pokémon;
# i. mostrar los entrenadores que tienen Pokémons repetidos;
# j. determinar los entrenadores que tengan uno de los siguientes Pokémons: Tyrantrum, Terrakion o Wingull;
# k. determinar si un entrenador “X” tiene al Pokémon “Y”, tanto el nombre del entrenador 
# como del Pokémon deben ser ingresados; además si el entrenador tiene al Pokémon se 
# deberán mostrar los datos de ambos



















# 22. Se dispone de una lista de todos los Jedi, de cada uno de estos se conoce su nombre, maestros, 
# colores de sable de luz usados y especie. implementar las funciones necesarias para resolver las 
# actividades enumeradas a continuación:
# a. listado ordenado por nombre y por especie;
# b. mostrar toda la información de Ahsoka Tano y Kit Fisto;
# c. mostrar todos los padawan de Yoda y Luke Skywalker, es decir sus aprendices;
# d. mostrar los Jedi de especie humana y twi'lek;
# e. listar todos los Jedi que comienzan con A;
# f. mostrar los Jedi que usaron sable de luz de más de un color;
# g. indicar los Jedi que utilizaron sable de luz amarillo o violeta;
# h. indicar los nombre de los padawans de Qui-Gon Jin y Mace Windu, si los tuvieron
